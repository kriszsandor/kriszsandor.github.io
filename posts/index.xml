<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Krisztian Sandor&#39;s data science blog</title>
    <link>https://kriszsandor.github.io/posts/</link>
    <description>Recent content in Posts on Krisztian Sandor&#39;s data science blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; Krisztian Sandor, Budapest, Hungary</copyright>
    <lastBuildDate>Thu, 13 Dec 2018 12:45:00 -0500</lastBuildDate>
    
	<atom:link href="https://kriszsandor.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Regression analysis of apartment prices in Budapest, Hungary</title>
      <link>https://kriszsandor.github.io/posts/20181213_apartment_price_regression/</link>
      <pubDate>Thu, 13 Dec 2018 12:45:00 -0500</pubDate>
      
      <guid>https://kriszsandor.github.io/posts/20181213_apartment_price_regression/</guid>
      <description>This project is about building a regression model to predict apartment prices in Budapest, Hungary based on physical, location-related and other features. This was the first standalone project I conducted in python during my bootcamp in Metis in New York - for this reason there are some natural limitations in the coding techniques.
The data was scraped from ingatlan.com, a website serving arguably as the biggest real-estate selling and renting platform in Hungary.</description>
    </item>
    
    <item>
      <title>Building a music recommendation engine</title>
      <link>https://kriszsandor.github.io/posts/20181212_music_recommendation/</link>
      <pubDate>Wed, 12 Dec 2018 11:20:26 -0500</pubDate>
      
      <guid>https://kriszsandor.github.io/posts/20181212_music_recommendation/</guid>
      <description>This exercise is inspired by the Music Recommendation Challenge KAGGLE competition.
The data was provided by KKBOX, an East-Asian music streaming service, similar to Spotify. It shows the first observable listening event for each unique user-song pair, together with potenitally useful Metadata. Besides the data provided, I sourced additional song and artist information via the API of Deezer music streaming service based on a &amp;lsquo;real-world&amp;rsquo; unique song identifier (ISRC id) in the KKBOX dataset</description>
    </item>
    
    <item>
      <title>Clustering of Fortune 500 companies based on Twitter activity</title>
      <link>https://kriszsandor.github.io/posts/20181210_fletcher_blog/</link>
      <pubDate>Tue, 11 Dec 2018 01:00:26 -0500</pubDate>
      
      <guid>https://kriszsandor.github.io/posts/20181210_fletcher_blog/</guid>
      <description>1. Importing required packages # twitter loader import sys sys.path.append(&amp;#39;[...]/GetOldTweets-python/&amp;#39;) import got3 # misc packages from collections import defaultdict import pandas as pd import numpy as np import pickle as pkl from math import isnan import os from time import time # Packages for scraping from fake_useragent import UserAgent import re import requests as req from bs4 import BeautifulSoup from urllib.parse import urljoin # Packages for cleaning text from string import digits, punctuation from nltk.</description>
    </item>
    
    <item>
      <title>Dynamic cell-capacity allocation for telecoms</title>
      <link>https://kriszsandor.github.io/posts/20181213_passionproject/</link>
      <pubDate>Fri, 07 Dec 2018 11:49:26 -0500</pubDate>
      
      <guid>https://kriszsandor.github.io/posts/20181213_passionproject/</guid>
      <description>This project has served as my &amp;lsquo;passion-project&amp;rsquo; in Metis Data Science Bootcamp in December, 2018 in New York.
# Plotting libraries import geojson import matplotlib.colors as colors import matplotlib.cm as cmx import seaborn as sns %matplotlib inline import matplotlib.pyplot as plt from descartes import PolygonPatch import matplotlib.animation as animation # Standard libraries import pandas as pd import numpy as np # Misc libraries import json import io import requests %matplotlib inline 1.</description>
    </item>
    
  </channel>
</rss>